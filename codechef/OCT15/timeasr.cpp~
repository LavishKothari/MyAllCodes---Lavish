#include<stdio.h>
int globalLength=0;
struct Time
{	
	double degree;
	int h[2],m[2],length;
};
int doubleEqual(double a,double b)
{
	
}
double findDegree(int h,int m)
{
	double temp;
	temp=m*6-h*30-0.5*m;
	if(temp>=0)
	{
		if(temp<=180)
			return temp;
		else
			return temp-180;
	}
	else
	{
		if(temp>=-180)
			return -temp;
		else
			return 360+temp;
	}
}
void fillTable(struct Time*table)
{
	int h,m;
	double temp;
	for(h=0;h<12;j++)
	{
		for(m=0;m<60;m++)
		{
			temp=findDegree(h,m);
			flag=0;
			for(i=0;i<globalLength;i++)
			{
				if(doubleEqual(temp,table[globalLength].degree))
				{
					table[globalLength].h[1]=h;
					table[globalLength].m[1]=m;
					break;
				}
			}
			if(i==globalLength)
			{
				globalLength++;
				table[globalLength].h[0]=h;
				table[globalLength].m[0]=m;
			}
		}
	}
}
void findAnswer(double degree)
{
	struct Time*a;
	a=(struct Time*)malloc(sizeof(struct Time));
	(*a).length=0;
	int h,m;
	double temp;
	len=0;
	for(h=0;h<12;j++)
	{
		for(m=0;m<60;m++)
		{
			temp=findDegree(h,m);
			if(doubleEqual(temp,d))
			{
				(*a).degree=d;
				(*a).h[(*a).length]=h;
				(*a).m[(*a).length]=d;
				(*a).length++;
			}
			/*
			flag=0;
			for(i=0;i<globalLength;i++)
			{
				if(doubleEqual(temp,table[globalLength].degree))
				{
					table[globalLength].h[1]=h;
					table[globalLength].m[1]=m;
					break;
				}
			}
			if(i==globalLength)
			{
				globalLength++;
				table[globalLength].h[0]=h;
				table[globalLength].m[0]=m;
			}
			*/
		}
	}
}
int main()
{
	int t;
	//struct Time table[720];
	
	//fillTable(table);
	struct Time *a;
	scanf("%d",&t);
	while(t--)
	{
		scanf("%d",&d);	
		a=findAnswer(d);
		for(i=0;i<(*a).length;i++)
		{
			if (a.h[i]>9 && a.m[i]>9)
				print("%d:%d",a.h[i],a.m[i]);
			else if(a.h[i]<10 && a.m[i]>9)
				print("0%d:%d",a.h[i],a.m[i]);
			else if(a.h[i]>9 && a.m[i]<10)
				print("%d:0%d",a.h[i],a.m[i]);
			else if(a.h[i]<10 and a.m[i]<10)
				print("0%d:0%d",a.h[i],a.m[i]);
		}
	}
	return 0;
}
